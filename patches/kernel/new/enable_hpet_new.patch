diff --git a/arch/x86/kernel/early-quirks.c b/arch/x86/kernel/early-quirks.c
index db9a675..061c1a2 100644
--- a/arch/x86/kernel/early-quirks.c
+++ b/arch/x86/kernel/early-quirks.c
@@ -584,8 +584,9 @@ static void __init intel_graphics_stolen(int num, int slot, int func)
 static void __init force_disable_hpet(int num, int slot, int func)
 {
 #ifdef CONFIG_HPET_TIMER
-	boot_hpet_disable = true;
-	pr_info("x86/hpet: Will disable the HPET for this platform because it's not reliable\n");
+	//boot_hpet_disable = true;
+	//pr_info("x86/hpet: Will disable the HPET for this platform because it's not reliable\n");
+	pr_info("x86/hpet: WARNING Enable HPET forcedly on disabled platform because it's not reliable\n");
 #endif
 }
 
diff --git a/drivers/char/hpet.c b/drivers/char/hpet.c
index 240b6cf..b0cf480 100644
--- a/drivers/char/hpet.c
+++ b/drivers/char/hpet.c
@@ -885,10 +885,9 @@ int hpet_alloc(struct hpet_data *hdp)
 	ntimer = ((cap & HPET_NUM_TIM_CAP_MASK) >> HPET_NUM_TIM_CAP_SHIFT) + 1;
 
 	if (hpetp->hp_ntimer != ntimer) {
-		printk(KERN_WARNING "hpet: number irqs doesn't agree"
-		       " with number of timers\n");
-		kfree(hpetp);
-		return -ENODEV;
+		printk(KERN_WARNING "hpet: number irqs (%d) doesn't agree"
+		       " with number of timers (%d)\n",hpetp->hp_ntimer,ntimer);
+		printk(KERN_WARNING "hpet: WARNING Ignoring\n");
 	}
 
 	if (last)
